'use strict';

const Transform = require('stream').Transform;

const defaults = {
    encoding: 'utf8',
    writableObjectMode: true,
    readableObjectMode: true
};

class SelectPropertyTransform extends Transform {
    constructor(options = {}) {
        super(Object.assign({}, options, defaults));
        this._buffer = [];
        this._scope = options.scope || '.';
    }

    _transform(chunk, encoding, callback) {
        const object = JSON.parse(encoding === 'utf8' ? chunk : chunk.toString());
        const result = this._drill(
            object,
            this._scope.split('.').filter((x) => x !== '')
        );

        if (result) {
            if (result instanceof String || typeof result === 'string') {
                this.push(result);
            } else {
                this.push(JSON.stringify(result));
            }
        } else if (this._scope === '.') {
            this.push(JSON.stringify(object));
        }

        callback();
    }

    _flush(callback) {
        this._reset();
        callback();
    }

    _drill(object, scopeList) {
        const scope = scopeList.shift();
        const scopedObject = object[scope];

        let result = null;

        if (scopedObject) {
            result = scopeList.length ? this._drill(scopedObject, scopeList) : scopedObject;
        }

        return result;
    }

    _reset() {
        this._buffer.length = 0;
    }
}

module.exports = SelectPropertyTransform;
