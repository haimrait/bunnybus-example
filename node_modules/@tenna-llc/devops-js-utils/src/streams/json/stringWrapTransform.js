'use strict';

const hostname = require('os').hostname();
const Transform = require('stream').Transform;

const defaults = {
    encoding: 'utf8',
    writableObjectMode: false,
    readableObjectMode: false
};

class StringWrapTransform extends Transform {
    constructor(options = {}) {
        super(Object.assign({}, options, defaults));
        this._buffer = [];
        this._isJson = false;
        this._isStart = true;
    }

    _transform(chunk, encoding, callback) {
        const decodedChunk = encoding === 'utf8' ? chunk : chunk.toString();
        this._process(decodedChunk);
        callback();
    }

    _flush(callback) {
        this._process('\n');
        callback();
    }

    _process(chunk) {
        for (let i = 0; i < chunk.length; ++i) {
            if (this._isStart) {
                if (chunk[0] === '{') {
                    this._isJson = true;
                }

                this._isStart = false;
            }

            this._buffer.push(chunk[i]);

            if (chunk[i] === '\n') {
                if (this._buffer.length && this._buffer[0] !== '\n') {
                    if (this._isJson && this._buffer[this._buffer.length - 2] === '}') {
                        this.push(this._buffer.join(''));
                    } else {
                        this._buffer.pop();
                        this.push(JSON.stringify({ hostname, message: this._buffer.join('') }) + '\n');
                    }
                }

                this._isStart = true;
                this._isJson = false;
                this._buffer.length = 0;
            }
        }
    }
}

module.exports = StringWrapTransform;
