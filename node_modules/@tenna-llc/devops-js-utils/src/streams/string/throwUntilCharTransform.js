'use strict';

const Transform = require('stream').Transform;

const defaults = {
    encoding: 'utf8',
    writableObjectMode: true,
    readableObjectMode: true
};

class ThrowUntilCharTransform extends Transform {
    constructor(options = {}) {
        super(Object.assign({}, options, defaults));
        this._buffer = [];
        this._char = options.char || '';
        this._found = false;
    }

    _transform(chunk, encoding, callback) {
        const decodedChunk = encoding === 'utf8' ? chunk : chunk.toString();

        if (this._char) {
            for (let i = 0; i < decodedChunk.length; ++i) {
                if (!this._found && decodedChunk[i] === this._char) {
                    this._buffer.length = 0;
                    this._found = true;
                }

                this._buffer.push(decodedChunk[i]);
            }

            this.push(this._buffer.join(''));
        } else {
            this.push(decodedChunk);
        }

        this._reset();
        callback();
    }

    _flush(callback) {
        this._reset();
        callback();
    }

    _reset() {
        this._buffer.length = 0;
        this._found = false;
    }
}

module.exports = ThrowUntilCharTransform;
