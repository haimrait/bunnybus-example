'use strict';

const Joi = require('@hapi/joi');
const SuperAgentCustomLogger = require('@tenna-llc/superagent-custom-logger');

class DigestionApiClient {
    constructor({ logger, superAgent }) {
        const schema = Joi.object({
            logger: Joi.object(),
            superAgent: Joi.object()
        });

        const { error } = schema.validate({ logger, superAgent }, { presence: 'required' });
        if (error) throw error;

        const request = superAgent.use(SuperAgentCustomLogger(logger)).set('Accept', 'application/json');

        Object.assign(this, { logger, request });
    }

    static get trackersEndpoint() {
        return '/trackers';
    }

    static get s3Endpoint() {
        return '/s3';
    }

    async getTrackerMetaByMakeSerial({ make, serial }) {
        const schema = Joi.object({
            make: Joi.string(),
            serial: Joi.string()
        });

        await schema.validateAsync({ make, serial }, { presence: 'required' });

        const { body } = await this.request.get(
            `${DigestionApiClient.trackersEndpoint}/?make=${make}&serial=${serial}`
        );
        return body;
    }

    async getTrackerMetaById({ trackerId }) {
        const schema = Joi.object({
            trackerId: Joi.string().uuid()
        });

        await schema.validateAsync({ trackerId }, { presence: 'required' });

        const { body } = await this.request.get(`${DigestionApiClient.trackersEndpoint}/${trackerId}`);

        return body;
    }

    async postS3Metadata({ key, metadata = {} }) {
        const schema = Joi.object({
            key: Joi.string(),
            metadata: Joi.object()
        });

        await schema.validateAsync({ key, metadata }, { presence: 'required' });

        const { body } = await this.request.post(`${DigestionApiClient.s3Endpoint}/${encodeURI(key)}`).send(metadata);

        return body;
    }

    async getS3Metadata({ key }) {
        const schema = Joi.object({
            key: Joi.string()
        });

        await schema.validateAsync({ key }, { presence: 'required' });

        const { body } = await this.request.get(`${DigestionApiClient.s3Endpoint}/${encodeURI(key)}`);

        return body;
    }
}

module.exports = DigestionApiClient;
