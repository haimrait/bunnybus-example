'use strict';

class TopicSummary {
    constructor({ name, queueSummary }) {
        if (!name) {
            throw new Error('name expected');
        }

        if (!queueSummary) {
            throw new Error('queueSummary expected');
        }

        Object.assign(this, { name, queueSummary });
    }

    set lastProcessed(value) {
        if (!this._lastProcessed || this._lastProcessed < value) {
            this._lastProcessed = value;
            this.queueSummary.lastProcessed = value;
            this._sinceLastProcessed = Date.now() - value;
        }
    }

    get lastProcessed() {
        return this._lastProcessed;
    }

    get sinceLastProcessed() {
        return this._sinceLastProcessed;
    }

    set windowedExecutionTimes(values) {
        this._windowedExecutionTimes = values;
    }

    get windowedExecutionTimes() {
        return this._windowedExecutionTimes || [];
    }

    get averageExecutionTime() {
        if (this.windowedExecutionTimes.length > 0) {
            const sum = this.windowedExecutionTimes.reduce((previous, current) => (current += previous));
            const avg = Math.round(sum / this.windowedExecutionTimes.length);
            return avg;
        }

        return undefined;
    }

    toPOCO() {
        return {
            name: this.name,
            lastProcessed: this.lastProcessed,
            windowedExecutionTimes: this.windowedExecutionTimes,
            averageExecutionTime: this.averageExecutionTime,
            sinceLastProcessed: this.sinceLastProcessed
        };
    }
}

module.exports = TopicSummary;
