'use strict';

const TopicSummary = require('./topicSummary');

class QueueSummary {
    constructor({ name, healthSummary }) {
        if (!name) {
            throw new Error('name expected');
        }

        if (!healthSummary) {
            throw new Error('healthSummary expected');
        }

        Object.assign(this, {
            name,
            topics: new Map(),
            _unprocessedCount: 0,
            _lastProcessed: undefined,
            _ok: true,
            healthSummary
        });
    }

    set lastProcessed(value) {
        if (!this._lastProcessed || value > this._lastProcessed) {
            this._lastProcessed = value;
            this._sinceLastProcessed = Date.now() - value;
            this.ok = !(
                this._unprocessedCount > 0 && this._sinceLastProcessed > this.healthSummary.lastProcessedThresholdMs
            );
        }
    }

    set unprocessedCount(value) {
        this._unprocessedCount = value;
        this.ok = !(
            this._unprocessedCount > 0 && this._sinceLastProcessed > this.healthSummary.lastProcessedThresholdMs
        );
    }

    get unprocessedCount() {
        return this._unprocessedCount;
    }

    get lastProcessed() {
        return this._lastProcessed;
    }

    get sinceLastProcessed() {
        return this._sinceLastProcessed;
    }

    set ok(value) {
        if (!value) {
            this._ok = false;
        }

        this.healthSummary.ok = value;
    }

    get ok() {
        return this._ok;
    }

    getTopic(topicName) {
        return !this.topics.has(topicName)
            ? this.topics.set(topicName, new TopicSummary({ name: topicName, queueSummary: this })).get(topicName)
            : this.topics.get(topicName);
    }

    toPOCO() {
        return {
            name: this.name,
            topics: [...this.topics.values()].map((x) => x.toPOCO()),
            unprocessedCount: this.unprocessedCount,
            lastProcessed: this.lastProcessed,
            sinceLastProcessed: this.sinceLastProcessed,
            ok: this.ok
        };
    }
}

module.exports = QueueSummary;
