'use strict';

const Lab = require('@hapi/lab');
const { expect } = require('@hapi/code');
const { Cognito } = require('@tenna-llc/aws-sdk-wrapper');
const { AWSCognitoFactory } = require('../../src/helpers');

const { UserPoolIdRequiredError } = Cognito;

const { before, after, beforeEach, afterEach, describe, it } = (exports.lab = Lab.script());

let awsCognitoFactory;

describe('Helpers', () => {
    describe('AWSCognitoFactory', () => {
        beforeEach(async () => {
            awsCognitoFactory = new AWSCognitoFactory();
        });

        describe('add', () => {
            it('should error when client configuration does not have a name', async () => {
                const clientConfiguration = {
                    config: {}
                };

                expect(() => awsCognitoFactory.add(clientConfiguration)).to.throw(Error, '"name" is required');
            });

            it('should error when client configuration has a name not of type string', async () => {
                const clientConfiguration = {
                    name: new Date(),
                    config: {}
                };

                expect(() => awsCognitoFactory.add(clientConfiguration)).to.throw(Error, '"name" must be a string');
            });

            it('should not error when client configuration does not have config', async () => {
                const clientConfiguration = {
                    name: 'foo'
                };

                expect(() => awsCognitoFactory.add(clientConfiguration)).to.not.throw();
            });

            it('should error when client configuration has a config not of type object', async () => {
                const clientConfiguration = {
                    name: 'foo',
                    config: 'bar'
                };

                expect(() => awsCognitoFactory.add(clientConfiguration)).to.throw(
                    Error,
                    '"config" must be of type object'
                );
            });

            it('should error when a client configuration with the same name has already been built', async () => {
                const clientConfiguration = {
                    name: 'foo'
                };

                expect(() => awsCognitoFactory.add(clientConfiguration)).to.not.throw();
                expect(() => awsCognitoFactory.add(clientConfiguration)).to.throw(
                    Error,
                    'A configuration with name of (foo) has already been added'
                );
            });
        });

        describe('count', () => {
            it('should initialize with 0', async () => {
                expect(awsCognitoFactory.count()).to.equal(0);
            });

            it('should be 2 after 2 client configurations are added', async () => {
                awsCognitoFactory.add({
                    name: 'client1'
                });

                awsCognitoFactory.add({
                    name: 'client2'
                });

                expect(awsCognitoFactory.count()).to.equal(2);
            });
        });

        describe('get', () => {
            it('should error when client configuration does not exist', async () => {
                expect(() => awsCognitoFactory.build('foo')).to.throw(
                    Error,
                    'A configuration with name of (foo) does not exist'
                );
            });

            it('should fetch configuration when it exist', async () => {
                const clientConfiguration = {
                    name: 'client1',
                    config: {
                        hello: 'world'
                    }
                };

                awsCognitoFactory.add(clientConfiguration);

                let sut = undefined;
                expect(() => (sut = awsCognitoFactory.get('client1'))).to.not.throw();
                expect(sut).to.exist().and.to.include(clientConfiguration.config);
            });
        });

        describe('build', () => {
            it('should error when client configuration does not exist', async () => {
                expect(() => awsCognitoFactory.build('foo')).to.throw(
                    Error,
                    'A configuration with name of (foo) does not exist'
                );
            });

            it('should error with undefined config', async () => {
                awsCognitoFactory.add({
                    name: 'client1'
                });

                expect(() => awsCognitoFactory.build('client1')).to.throw(UserPoolIdRequiredError);
            });

            it('should error with empty config', async () => {
                awsCognitoFactory.add({
                    name: 'client1',
                    config: {}
                });

                expect(() => awsCognitoFactory.build('client1')).to.throw(UserPoolIdRequiredError);
            });

            it('should have built a client with config', async () => {
                const clientConfiguration = {
                    name: 'client1',
                    config: {
                        userPoolId: 'userPoolId'
                    }
                };

                awsCognitoFactory.add(clientConfiguration);

                let sut = undefined;
                expect(() => (sut = awsCognitoFactory.build('client1'))).to.not.throw();
                expect(sut).to.exist().and.to.be.an.instanceof(Cognito);
                expect(sut.params).to.include(clientConfiguration.config);
            });
        });
    });
});
