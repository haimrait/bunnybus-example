'use strict';

const Lab = require('@hapi/lab');
const Code = require('@hapi/code');
const ClientFactory = require('../../src/components/clientFactory');

const { before, after, beforeEach, afterEach, describe, it } = (exports.lab = Lab.script());
const expect = Code.expect;

let clientFactory = null;

describe('Components', () => {
    describe('Clientfactory', () => {
        beforeEach(async () => {
            clientFactory = new ClientFactory({
                server: {}
            });
        });

        describe('constructor', () => {
            describe('when configuring for BunnyBus client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(0);
                });

                it('should not error when bunnyBus node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { bunnyBus: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { bunnyBus: { 'us-east-1': {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { bunnyBus: { 'us-east-1': { host: '127.0.0.1' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.bunnyBusClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for AWS S3 client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(0);
                });

                it('should not error when awsS3 node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { awsS3: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { awsS3: { 'us-east-1': {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { awsS3: { 'us-east-1': { region: 'us-west-1' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.s3ClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for AWS DynamoDB client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(0);
                });

                it('should not error when awsDynamoDB node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { awsDynamoDB: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { awsDynamoDB: { 'us-east-1': {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { awsDynamoDB: { 'us-east-1': { region: 'us-west-1' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.dynamoDBClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for Redis client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(0);
                });

                it('should not error when awsDynamoDB node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { redis: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { redis: { 'us-east-1': {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { redis: { 'us-east-1': { host: '127.0.0.1' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for Redis Cluster client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(0);
                });

                it('should not error when awsDynamoDB node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { redisCluster: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { redisCluster: { 'us-east-1': {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: {
                                    clients: {
                                        redisCluster: { 'us-east-1': { nodes: [], options: { maxRedirections: 1 } } }
                                    }
                                }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.redisClusterClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for Sequelize client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.sequelizeClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.sequelizeClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.sequelizeClientFactory.count()).to.equal(0);
                });

                it('should not error when sequelize node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { sequelize: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.sequelizeClientFactory.count()).to.equal(0);
                });

                it('should throw with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { sequelize: { someDB: {} } } }
                            }))
                    ).to.throw(Error);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { sequelize: { someDB: { dialect: 'postgres' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.sequelizeClientFactory.count()).to.equal(1);
                });
            });

            describe('when configuring for SuperAgent client', () => {
                it('should not error when options is missing', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is missing in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: {} }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(0);
                });

                it('should not error when clients node is empty in options', async () => {
                    let sut = null;

                    expect(() => (sut = new ClientFactory({ server: {}, options: { clients: {} } }))).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(0);
                });

                it('should not error when superAgent node is empty in options', async () => {
                    let sut = null;

                    expect(
                        () => (sut = new ClientFactory({ server: {}, options: { clients: { superAgent: {} } } }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(0);
                });

                it('should build a client with empty configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { superAgent: { crud: {} } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(1);
                });

                it('should build a client with configuration defined', async () => {
                    let sut = null;

                    expect(
                        () =>
                            (sut = new ClientFactory({
                                server: {},
                                options: { clients: { superAgent: { crud: { host: '127.0.0.1' } } } }
                            }))
                    ).to.not.throw();
                    expect(sut).to.exist();
                    expect(sut.superAgentClientFactory.count()).to.equal(1);
                });
            });
        });
    });
});
