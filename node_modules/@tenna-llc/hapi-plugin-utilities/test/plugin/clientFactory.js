'use strict';

const Lab = require('@hapi/lab');
const Code = require('@hapi/code');
const Pkg = require('../../package.json');
const Hapi = require('@hapi/hapi');
const BunnyBus = require('@tenna-llc/bunnybus');
const Redis = require('ioredis');
const { S3, DynamoDB } = require('@tenna-llc/aws-sdk-wrapper');
const { ProxyAgent } = require('@tenna-llc/superagent-wrapper');
const { Sequelize } = require('sequelize');
const TestHarness = require('@tenna-llc/hapi-test-harness');
const Path = require('path');

const { before, after, beforeEach, afterEach, describe, it } = (exports.lab = Lab.script());
const expect = Code.expect;

let server = null;

describe('Plugin', () => {
    describe('clientFactory', () => {
        before(async () => {
            process.setMaxListeners(10000);
        });

        beforeEach(async () => {
            const serverBuilder = await new TestHarness.HapiServerBuilder(Hapi)
                .withPluginUsingDirectoryPath(Path.join(__dirname, '..', '..'))
                .withPluginOptionsUsingFilePath(Path.join(__dirname, 'mocks', 'options'));

            server = await serverBuilder.build();

            await server.start();
        });

        afterEach(async () => {
            return await server.stop();
        });

        describe('bunnyBusClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].bunnyBusClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].bunnyBusClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].bunnyBusClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].bunnyBusClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].bunnyBusClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].bunnyBusClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();
                    expect(build('foo')).to.exist().and.be.an.instanceof(BunnyBus);
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].bunnyBusClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('BunnyBus configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].bunnyBusClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1');
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('BunnyBus client instantiated from (us-east-1)');
                });
            });
        });

        describe('s3ClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].s3ClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].s3ClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].s3ClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].s3ClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].s3ClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].s3ClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();
                    expect(build('foo')).to.exist().and.be.an.instanceof(S3);
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].s3ClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('AWS S3 configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].s3ClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1');
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('AWS S3 client instantiated from (us-east-1)');
                });
            });
        });

        describe('dynamoDBClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].dynamoDBClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].dynamoDBClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].dynamoDBClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].dynamoDBClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].dynamoDBClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].dynamoDBClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();
                    expect(build('foo')).to.exist().and.be.an.instanceof(DynamoDB);
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].dynamoDBClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('AWS DynamoDB configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].dynamoDBClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1');
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('AWS DynamoDB client instantiated from (us-east-1)');
                });
            });
        });

        describe('redisClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].redisClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].redisClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();

                    const redis = build('foo');
                    expect(redis).to.exist().and.be.an.instanceof(Redis);
                    redis.quit();
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].redisClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Redis configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].redisClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1').quit();
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Redis client instantiated from (us-east-1)');
                });
            });
        });

        describe('redisClusterClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClusterClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClusterClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].redisClusterClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].redisClusterClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].redisClusterClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();

                    const redis = build('foo');
                    expect(redis).to.exist().and.be.an.instanceof(Redis.Cluster);
                    redis.quit();
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].redisClusterClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Redis Cluster configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].redisClusterClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1').quit();
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Redis Cluster client instantiated from (us-east-1)');
                });
            });
        });

        describe('sequelizeClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].sequelizeClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].sequelizeClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].sequelizeClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].sequelizeClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].sequelizeClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].sequelizeClientFactory;
                    const configuration = {
                        name: 'foo',
                        config: {
                            dialect: 'postgres'
                        }
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();
                    expect(build('foo')).to.exist().and.be.an.instanceof(Sequelize);
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].sequelizeClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo', config: { dialect: 'postgres' } });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Sequelize configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].sequelizeClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('someDB');
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('Sequelize client instantiated from (someDB)');
                });
            });
        });

        describe('superAgentClientFactory', () => {
            describe('plugin registration', () => {
                it('should have exposed the "add" function', async () => {
                    const sut = server.plugins[Pkg.name].superAgentClientFactory.add;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "build" function', async () => {
                    const sut = server.plugins[Pkg.name].superAgentClientFactory.build;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "get" function', async () => {
                    const sut = server.plugins[Pkg.name].superAgentClientFactory.get;

                    expect(sut).to.exist().and.to.be.a.function();
                });

                it('should have exposed the "count" function', async () => {
                    const sut = server.plugins[Pkg.name].superAgentClientFactory.count;

                    expect(sut).to.exist().and.to.be.a.function();
                });
            });

            describe('add client configuration', () => {
                it('should have added a configuration when declared in configuration', async () => {
                    const { count } = server.plugins[Pkg.name].superAgentClientFactory;

                    expect(count()).to.equal(1);
                });

                it('should have added a configuration when added through "add', async () => {
                    const { add, build, get, count } = server.plugins[Pkg.name].superAgentClientFactory;
                    const configuration = {
                        name: 'foo'
                    };

                    add(configuration);

                    expect(count()).to.equal(2);
                    expect(() => get('foo')).to.not.throw();
                    expect(build('foo')).to.exist().and.be.an.instanceof(ProxyAgent);
                });

                it('should have logged client being added', async () => {
                    const { add } = server.plugins[Pkg.name].superAgentClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        add({ name: 'foo' });
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('SuperAgent configuration (foo) added');
                });

                it('should have logged client being built', async () => {
                    const { build } = server.plugins[Pkg.name].superAgentClientFactory;
                    let logLevels = null;
                    let logMessage = null;

                    await new Promise((resolve) => {
                        server.events.once('log', (event, tags) => {
                            logLevels = tags;
                            logMessage = event.data;

                            resolve();
                        });

                        build('us-east-1');
                    });

                    expect(logLevels).to.include('debug');
                    expect(logMessage).to.equal('SuperAgent client instantiated from (us-east-1)');
                });
            });
        });
    });
});
