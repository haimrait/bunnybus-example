'use strict';

const { ShutdownTasks } = require('../helpers');

const RUN_MODES = {
    RUNNING: 0,
    STOPPING: 1,
    STOPPED: 2
};

class ShutdownOrchestrator {
    constructor({ server, process, options: { serverStopTimeoutMilliseconds = 5000 } = {} }) {
        Object.assign(this, { server, process, serverStopTimeoutMilliseconds, tasks: new ShutdownTasks() });
    }

    set runMode(value) {
        if (!Object.values(RUN_MODES).includes(value)) {
            throw new Error(`${value} is not a recognized RUN_MODE`);
        }

        this._runMode = value;
    }

    get runMode() {
        return this._runMode || RUN_MODES.RUNNING;
    }

    configure() {
        this.server.expose(
            'shutdownOrchestrator',
            {
                register: (...args) => {
                    const [{ name }] = args;
                    this.server.log(['debug'], `shutdown task (${name}) registered`);
                    return this.tasks.register(...args);
                },
                count: (...args) => {
                    return this.tasks.count(...args);
                }
            },
            { scope: true }
        );

        this.process
            .once('SIGTERM', async () => {
                this.runMode = RUN_MODES.STOPPING;

                this.server.log(['info'], 'SIGTERM detected, invoking all shutdown tasks');
                await Promise.all([
                    this.tasks.executeAll(),
                    this.server.stop({ timeout: this.serverStopTimeoutMilliseconds })
                ]);

                this.runMode = RUN_MODES.STOPPED;
                this.process.exit();
            })
            .once('SIGINT', async () => {
                this.runMode = RUN_MODES.STOPPING;

                this.server.log(['info'], 'SIGINT detected, invoking all shutdown tasks');
                await Promise.all([
                    this.tasks.executeAll(),
                    this.server.stop({ timeout: this.serverStopTimeoutMilliseconds })
                ]);

                this.runMode = RUN_MODES.STOPPED;
                this.process.exit();
            });

        this.server.events.once('stop', async () => {
            if (this.runMode === RUN_MODES.RUNNING) {
                this.runMode = RUN_MODES.STOPPING;

                this.server.log(['info'], 'server shutdown detected, invoking all shutdown tasks');
                this.runMode = RUN_MODES.STOPPED;
                await this.tasks.executeAll();
            }
        });
    }
}

module.exports = ShutdownOrchestrator;
