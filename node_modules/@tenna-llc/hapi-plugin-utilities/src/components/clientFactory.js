'use strict';

const {
    AWSDynamoDBClientFactory,
    AWSS3ClientFactory,
    AWSCognitoFactory,
    BunnyBusClientFactory,
    RedisClientFactory,
    RedisClusterClientFactory,
    SequelizeClientFactory,
    SuperAgentClientFactory
} = require('../helpers');

const MAPINDEX = {
    CONFIG_KEY: 0,
    CLIENT_FACTORY: 1,
    HAPI_DECORATOR_KEY: 2,
    READABLE_CLIENT_NAME: 3
};

class ClientFactory {
    constructor({ server, options = {} }) {
        const clientFactories = {
            bunnyBusClientFactory: new BunnyBusClientFactory(),
            dynamoDBClientFactory: new AWSDynamoDBClientFactory(),
            cognitoClientFactory: new AWSCognitoFactory(),
            redisClientFactory: new RedisClientFactory(),
            redisClusterClientFactory: new RedisClusterClientFactory(),
            s3ClientFactory: new AWSS3ClientFactory(),
            sequelizeClientFactory: new SequelizeClientFactory(),
            superAgentClientFactory: new SuperAgentClientFactory()
        };

        const clientFactoryMap = [
            // CONFIG_KEY, CLIENT_FACTORY, HAPI_DECORATOR_KEY, READABLE_CLIENT_NAME
            ['awsDynamoDB', clientFactories.dynamoDBClientFactory, 'dynamoDBClientFactory', 'AWS DynamoDB'],
            ['awsS3', clientFactories.s3ClientFactory, 's3ClientFactory', 'AWS S3'],
            ['awsCognito', clientFactories.cognitoClientFactory, 'cognitoClientFactory', 'AWS Cognito'],
            ['bunnyBus', clientFactories.bunnyBusClientFactory, 'bunnyBusClientFactory', 'BunnyBus'],
            ['redis', clientFactories.redisClientFactory, 'redisClientFactory', 'Redis'],
            ['redisCluster', clientFactories.redisClusterClientFactory, 'redisClusterClientFactory', 'Redis Cluster'],
            ['sequelize', clientFactories.sequelizeClientFactory, 'sequelizeClientFactory', 'Sequelize'],
            ['superAgent', clientFactories.superAgentClientFactory, 'superAgentClientFactory', 'SuperAgent']
        ];

        Object.assign(this, {
            server,
            options,
            clientFactoryMap,
            ...clientFactories
        });

        const { clients = {} } = options;

        clientFactoryMap.forEach((map) => {
            const configSection = clients[map[MAPINDEX.CONFIG_KEY]];
            if (configSection) {
                for (const [name, config] of Object.entries(configSection)) {
                    map[MAPINDEX.CLIENT_FACTORY].add({ name, config });
                }
            }
        });
    }

    configure() {
        this.clientFactoryMap.forEach((map) => {
            this.server.expose(
                map[MAPINDEX.HAPI_DECORATOR_KEY],
                {
                    add: (...args) => {
                        const [{ name }] = args;
                        this.server.log(
                            ['debug'],
                            `${map[MAPINDEX.READABLE_CLIENT_NAME]} configuration (${name}) added`
                        );
                        return map[MAPINDEX.CLIENT_FACTORY].add(...args);
                    },
                    build: (...args) => {
                        const [name] = args;
                        this.server.log(
                            ['debug'],
                            `${map[MAPINDEX.READABLE_CLIENT_NAME]} client instantiated from (${name})`
                        );
                        return map[MAPINDEX.CLIENT_FACTORY].build(...args);
                    },
                    get: (...args) => map[MAPINDEX.CLIENT_FACTORY].get(...args),
                    count: (...args) => map[MAPINDEX.CLIENT_FACTORY].count(...args)
                },
                { scope: true }
            );
        });
    }
}

module.exports = ClientFactory;
