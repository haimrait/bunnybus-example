'use strict';

const Exec = require('child_process').exec;
const Path = require('path');
const Semver = require('semver');

class VersionReporter {
    constructor({ server, options }) {
        Object.assign(this, { server, options });
    }

    configure() {
        this.server.route({
            method: 'GET',
            path: this.options.paths.topLevelVersion,
            handler: (...args) => this.handler(...args),
            options: {
                tags: ['api'],
                description: 'returns top level version numbers for the project this plugin lives in'
            }
        });
    }

    async _npmListDepthZero() {
        return await new Promise((resolve, reject) => {
            Exec('npm list --depth=0 --json=true', { cwd: process.cwd() }, (err, stdout, stderr) => {
                if (err) {
                    console.log(err);
                    reject(new Error(`Error while reading from 'npm list --depth=0 --json=true'\n${stderr}`));
                }

                resolve(JSON.parse(stdout));
            });
        });
    }

    async handler(request, h) {
        const { name, version, dependencies = {}, peerDependencies = {} } = require(Path.join(
            process.cwd(),
            'package.json'
        ));

        const liveReport = await this._npmListDepthZero();

        const applyVersion = (dependencyListObject) => {
            Object.keys(dependencyListObject).forEach((key) => {
                dependencyListObject[key] = Semver.clean(liveReport.dependencies[key].version);
            });
        };

        const result = {
            name,
            version,
            nodeVersion: Semver.clean(process.version),
            dependencies,
            peerDependencies
        };

        applyVersion(result.dependencies);
        applyVersion(result.peerDependencies);

        request.log(['debug'], result);

        return result;
    }
}

module.exports = VersionReporter;
