'use strict';

const Joi = require('@hapi/joi');
const TimeoutAsync = require('./timeoutAsync');

const schema = {
    register: Joi.object({
        name: Joi.string().required(),
        asyncFunction: Joi.function().arity(0).required(),
        timeout: Joi.number().integer().default(1000).optional()
    }).required()
};

class ShutdownTasks {
    constructor() {
        this._tasks = new Map();
        this._isRunning = false;
    }

    register(task) {
        const { error, value: validatedTask } = schema.register.validate(task);

        if (error) {
            throw error;
        }

        if (this._tasks.has(validatedTask.name)) {
            throw new Error(`A task with name of (${validatedTask.name}) has already been defined`);
        }

        this._tasks.set(validatedTask.name, validatedTask);
    }

    count() {
        return this._tasks.size;
    }

    async executeAll() {
        if (!this._isRunning) {
            this._isRunning = true;

            const promises = [];

            for (const [, { asyncFunction, timeout }] of this._tasks) {
                promises.push(TimeoutAsync(asyncFunction, timeout)());
            }

            const result = await Promise.allSettled(promises);

            this._isRunning = false;

            return result;
        }
    }
}

module.exports = ShutdownTasks;
