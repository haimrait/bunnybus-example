'use strict';

const Joi = require('@hapi/joi');

const schema = {
    add: Joi.object({
        name: Joi.string().required(),
        config: Joi.object().optional()
    }).required()
};

class BaseClientFactory {
    constructor() {
        this._configurations = new Map();
    }

    add(clientConfiguration) {
        const { error, value: validatedClientConfiguration } = schema.add.validate(clientConfiguration);

        if (error) {
            throw error;
        }

        if (this._configurations.has(validatedClientConfiguration.name)) {
            throw new Error(
                `A configuration with name of (${validatedClientConfiguration.name}) has already been added`
            );
        }

        this._configurations.set(validatedClientConfiguration.name, validatedClientConfiguration.config);
    }

    count() {
        return this._configurations.size;
    }

    get(name) {
        if (!this._configurations.has(name)) {
            throw new Error(`A configuration with name of (${name}) does not exist`);
        }

        return this._configurations.get(name);
    }
}

module.exports = BaseClientFactory;
