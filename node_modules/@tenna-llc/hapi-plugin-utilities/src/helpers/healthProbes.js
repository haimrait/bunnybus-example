'use strict';

const Joi = require('@hapi/joi');
const TimeoutAsync = require('./timeoutAsync');

const schema = {
    register: Joi.object({
        name: Joi.string().required(),
        asyncFunction: Joi.function().arity(0).required(),
        timeout: Joi.number().integer().default(2000).optional()
    }).required()
};

class HealthProbes {
    constructor() {
        this._probes = new Map();
    }

    register(probe) {
        const { error, value: validatedProbe } = schema.register.validate(probe);

        if (error) {
            throw error;
        }

        if (this._probes.has(validatedProbe.name)) {
            throw new Error(`A probe with name of (${validatedProbe.name}) has already been defined`);
        }

        this._probes.set(validatedProbe.name, validatedProbe);
    }

    count() {
        return this._probes.size;
    }

    async scanAll() {
        const result = { ok: true, probes: [] };

        const promises = [];
        const names = [];

        for (const [, { name, asyncFunction, timeout }] of this._probes) {
            names.push(name);
            promises.push(TimeoutAsync(asyncFunction, timeout)());
        }

        const responses = await Promise.allSettled(promises);

        for (let i = 0; i < responses.length; ++i) {
            const { status, reason, value } = responses[i];

            const probeResponse = {
                name: names[i],
                response: value
            };

            if (status === 'rejected') {
                probeResponse.error = reason.message;
                result.ok = false;
            }

            if (value && value.ok === false) {
                result.ok = false;
            }

            result.probes.push(probeResponse);
        }

        return result;
    }
}

module.exports = HealthProbes;
