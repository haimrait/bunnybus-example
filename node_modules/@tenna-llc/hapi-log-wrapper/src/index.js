'use strict';

class LoggerFactory {
    constructor() {
        Object.assign(this, { _tags: [], _server: undefined, _isConsole: false });
    }

    withHapiServer(server) {
        this._server = server;
        return this;
    }

    withConsole() {
        this._isConsole = true;
        return this;
    }

    withTag(tag) {
        if (!this._tags.includes(tag)) {
            this._tags.push(tag);
        }

        return this;
    }

    build() {
        return new Logger({ server: this._server, isConsole: this._isConsole, decoratorTags: this._tags });
    }
}

class Logger {
    constructor({ server, isConsole, decoratorTags }) {
        Object.assign(this, { server, isConsole, decoratorTags });
    }

    _log({ logLevelTags = [], data }) {
        const tags = this.decoratorTags.concat(logLevelTags);

        if (this.server) {
            this.server.log(tags, data);
        }

        if (this.isConsole) {
            if (tags.includes('error') || tags.includes('fatal')) {
                console.error(data);
            } else if (tags.includes('warn')) {
                console.warn(data);
            } else if (tags.includes('debug')) {
                console.debug(data);
            } else {
                console.log(data);
            }
        }

        return this;
    }

    log(data) {
        this._log({ logLevelTags: 'debug', data });
        return this;
    }

    debug(data) {
        this._log({ logLevelTags: 'debug', data });
        return this;
    }

    info(data) {
        this._log({ logLevelTags: 'info', data });
        return this;
    }

    warn(data) {
        this._log({ logLevelTags: 'warn', data });
        return this;
    }

    error(data) {
        this._log({ logLevelTags: 'error', data });
        return this;
    }

    fatal(data) {
        this._log({ logLevelTags: 'fatal', data });
        return this;
    }
}

module.exports = LoggerFactory;
