'use strict';

const AWS = require('aws-sdk');
const Service = require('./service');

let singleton = undefined;
class S3 extends Service {
    constructor(params) {
        super(params);
        if (params) {
            this._params = params;
        }

        // AWS.config.update(this.params);
        this._s3 = new AWS.S3(this.params);

        return this;
    }

    static Singleton(params) {
        if (!singleton) {
            singleton = new S3();
        }

        if (params) {
            singleton.params = params;
        }

        return singleton;
    }

    get params() {
        return Object.assign({}, this._params);
    }

    set params(value) {
        this._params = Object.assign({}, value);
        this._s3 = new AWS.S3(this.params);
    }

    /**
     * Check if the Bucket exists
     *
     * @param  {string} bucketName - the bucket name
     * @return {boolean}           - A boolean to denote if the bucket name exists or not
     */

    async bucketExists(bucketName) {
        let result = true;

        try {
            const opts = { Bucket: bucketName };
            await this._s3.headBucket(opts).promise();
        } catch (err) {
            if (err.code === 'NotFound') {
                result = false;
            }
        }

        return result;
    }

    /**
     * Create the Bucket exists
     *
     * @param  {string} bucketName - the bucket name
     * @param  {object} params     - additional parameters
     * @return {boolean}           - A boolean returned if bucket creation is success.
     */

    async createBucket(bucketName, params) {
        const opts = Object.assign({}, { Bucket: bucketName }, params);

        await this._s3.createBucket(opts).promise();

        return true;
    }

    /**
     * Delete the Bucket
     *
     * @param  {string} bucketName - the bucket name
     * @param  {object} params     - additional parameters
     * @return {boolean}           - A boolean returned if bucket deletion is success.
     */

    async deleteBucket(bucketName, params) {
        const opts = Object.assign({}, { Bucket: bucketName }, params);

        await this._s3.deleteBucket(opts).promise();

        return true;
    }

    /**
     * List files inside the Bucket
     *
     * @param  {string} bucketName - the bucket name
     * @param  {object} params     - additional parameters
     * @return {Object}            - An object containing the list of files inside the Bucket.
     */

    async listBucket(bucketName, params) {
        const opts = Object.assign({}, { Bucket: bucketName }, params);

        const result = await this._s3.listObjectsV2(opts).promise();

        if (result.NextContinuationToken) {
            const nextResult = await this.listBucket(
                bucketName,
                Object.assign({}, params, { ContinuationToken: result.NextContinuationToken })
            );

            result.Contents.push(...nextResult);
        }

        return result.Contents.length > 0 ? result.Contents : [];
    }

    /**
     * Put a JSON object into the s3 bucket with the file name denoted as Key
     *
     * @param  {string} bucketName   - the bucket name
     * @param  {string} key          - Object location in the bucket
     * @param  {string} ACL          - Access rights for the file
     * @param  {string} jsonContent  - JSON content to be written to the file
     * @param  {object} params       - Additional parameters if any
     * @return {object}              - A promise containing the response
     */

    async put(bucketName, key, ACL, jsonContent, params) {
        const opts = Object.assign(
            {},
            {
                Bucket: bucketName,
                Key: key,
                ACL,
                Body: JSON.stringify(jsonContent),
                ContentType: 'application/json'
            },
            params
        );

        return await this._s3.putObject(opts).promise();
    }

    /**
     * Find or Replace a file in the s3 bucket with the properties denoted in params object
     *
     * @param  {object} params    - s3 Params
     * @return {object} s3Promise - A promise containing the response
     */

    async putFile(params) {
        return await this._s3.putObject(params).promise();
    }

    /**
     * Put a JSON object into the s3 bucket with the file name denoted as Key
     *
     * @param  {string} bucketName   - the bucket name
     * @param  {string} key          - Object location in the bucket
     * @param  {string} ACL          - Access rights for the file
     * @param  {object} body         - (Buffer, Typed Array, Blob, String, ReadableStream)
     * @param  {object} params       - Additional parameters if any
     * @return {object}              - A promise containing the response
     */

    async upload(bucketName, key, ACL, body, params) {
        const opts = Object.assign(
            {},
            {
                Bucket: bucketName,
                Key: key,
                ACL,
                Body: body
            },
            params
        );

        return await this._s3.upload(opts).promise();
    }

    /**
     * Delete the object identified by the Key from the s3 bucket
     *
     * @param  {string} bucketName   - the bucket name
     * @param  {string} key          - Object location in the bucket
     * @return {boolean}             - A boolean of true or false if the object is deleted.
     */

    async del(bucketName, key) {
        const response = await this._s3
            .deleteObjects({
                Delete: {
                    Objects: [
                        {
                            Key: key
                        }
                    ]
                },
                Bucket: bucketName
            })
            .promise();

        return response.Deleted.length ? true : false;
    }

    /**
     * Get the contents of the Key from a s3 bucket
     *
     * @param  {string} bucketName - the bucket name
     * @param  {string} key          - Object location in the bucket
     * @return {object}              - A promise containing the response
     */

    async get(bucketName, key) {
        return await this._s3
            .getObject({
                Bucket: bucketName,
                Key: key
            })
            .promise();
    }

    /**
     * Returns a 'thenable' promise that will be resolved with a pre-signed URL for a given operation name.
     *
     * @param  {string} operation - the operations needed
     * @param  {object} params - additional parameters
     * @return {object} - A promise containing the response
     */

    async getSignedUrlPromise(operation, params) {
        return await this._s3.getSignedUrlPromise(operation, params);
    }

    /**
     * Get the contents of the Key from a s3 bucket
     *
     * @param  {string} bucketName - the bucket name
     * @param  {string} key          - Object location in the bucket
     * @return {Stream}              - A readable stream
     */

    getStream(bucketName, key) {
        return this._s3
            .getObject({
                Bucket: bucketName,
                Key: key
            })
            .createReadStream();
    }

    /**
     * Check if the key exists in the s3 bucket
     *
     * @param  {string} bucketName - the bucket name
     * @param  {string} key        - Object location in the bucket
     * @return {boolean}           - A boolean with the response of true or false
     */

    async check(bucketName, key) {
        let result = true;

        try {
            await this._s3
                .headObject({
                    Bucket: bucketName,
                    Key: key
                })
                .promise();
        } catch (err) {
            if (err.code === 'NotFound') {
                result = false;
            }
        }

        return result;
    }
}

module.exports = S3;
