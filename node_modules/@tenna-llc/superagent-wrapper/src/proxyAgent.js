'use strict';

const SuperAgent = require('superagent');
const HttpKeepAliveAgent = require('agentkeepalive');
const HttpsKeepAliveAgent = require('agentkeepalive').HttpsAgent;
const Prefix = require('superagent-prefix');
const Joi = require('@hapi/joi');

const schema = {
    resolutionMiddlewareSetter: Joi.function().arity(2).label('resolutionMiddleware').optional(),
    rejectionMiddlewareSetter: Joi.function().arity(2).label('rejectionMiddleware').optional()
};

class ProxyAgent extends SuperAgent.agent {
    constructor(options = {}) {
        const {
            superAgentOptions = {},
            host,
            prefix,
            retryCount = 3,
            timeoutResponseMs = 5000,
            timeoutDeadlineMs = 60000
        } = options;

        const KeepAliveAgent = host && host.startsWith('https://') ? HttpsKeepAliveAgent : HttpKeepAliveAgent;

        super(new KeepAliveAgent({ ...superAgentOptions }));
        this.options = Object.assign({}, options, {
            superAgentOptions,
            host,
            prefix,
            retryCount,
            timeoutResponseMs,
            timeoutDeadlineMs
        });

        return this.use(Prefix(`${host || ''}${prefix || ''}`))
            .retry(retryCount, ProxyAgent.shouldRetry)
            .timeout({
                response: timeoutResponseMs,
                deadline: timeoutDeadlineMs
            });
    }

    static shouldRetry(_, response) {
        return !(
            response &&
            ((response.status >= 200 && response.status < 300) || [401, 404, 422].includes(response.status))
        );
    }

    get rejectionMiddleware() {
        return this._rejectionMiddleware ? this._rejectionMiddleware : (error, rejectCallback) => rejectCallback(error);
    }

    set rejectionMiddleware(func) {
        const { error } = schema.rejectionMiddlewareSetter.validate(func);

        if (error) {
            throw error;
        }

        this._rejectionMiddleware = func;
    }

    get resolutionMiddleware() {
        return this._resolutionMiddleware
            ? this._resolutionMiddleware
            : (response, resolveCallback) => resolveCallback(response);
    }

    set resolutionMiddleware(func) {
        const { error } = schema.resolutionMiddlewareSetter.validate(func);

        if (error) {
            throw error;
        }

        this._resolutionMiddleware = func;
    }

    _setDefaults(req) {
        super._setDefaults(req);

        const then = req.then;

        req.then = (resolve, reject) => {
            const resolveShim = (response) => {
                this.resolutionMiddleware(response, resolve);
            };

            const rejectShim = (error) => {
                this.rejectionMiddleware(error, reject);
            };

            then.call(req, resolveShim, rejectShim);
        };
    }
}

module.exports = ProxyAgent;
